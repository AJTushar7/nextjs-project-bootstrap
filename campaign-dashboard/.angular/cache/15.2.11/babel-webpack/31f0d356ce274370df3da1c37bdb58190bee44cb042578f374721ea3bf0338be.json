{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/dashboard-data.service\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = function (a0, a1) {\n  return {\n    \"text-green-600\": a0,\n    \"text-red-600\": a1\n  };\n};\nfunction DashboardComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"div\", 16);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 17);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 18);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const card_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(card_r2.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(card_r2.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(5, _c0, card_r2.change >= 0, card_r2.change < 0));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", card_r2.change >= 0 ? \"+\" : \"\", \"\", card_r2.change, \"% \");\n  }\n}\nfunction DashboardComponent_option_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r3.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(option_r3.label);\n  }\n}\nexport class DashboardComponent {\n  constructor(dashboardService) {\n    this.dashboardService = dashboardService;\n    this.errorMessage = '';\n    this.startDate = '';\n    this.endDate = '';\n    this.maxDate = '';\n    this.kpiCards = [{\n      title: 'Total Revenue',\n      value: '$1.2M',\n      change: 5.4\n    }, {\n      title: 'Campaign ROI',\n      value: '350%',\n      change: 3.2\n    }, {\n      title: 'Messages Sent',\n      value: '1.5M',\n      change: -1.1\n    }, {\n      title: 'Avg Conversion Rate',\n      value: '4.5%',\n      change: 0.8\n    }];\n    this.selectedCriteria = 'sent';\n    this.criteriaOptions = [{\n      label: 'Sent',\n      value: 'sent'\n    }, {\n      label: 'Delivered',\n      value: 'delivered'\n    }];\n  }\n  ngOnInit() {\n    try {\n      this.channelData = this.dashboardService.getChannelPerformance();\n      this.engagementMetrics = this.dashboardService.getEngagementMetrics();\n      this.budgetMetrics = this.dashboardService.getBudgetMetrics();\n      this.campaignEvents = this.dashboardService.getCampaignEvents();\n      // Initialize date range to last 7 days\n      const today = new Date();\n      this.maxDate = today.toISOString().split('T')[0];\n      const priorDate = new Date().setDate(today.getDate() - 7);\n      this.startDate = new Date(priorDate).toISOString().split('T')[0];\n      this.endDate = this.maxDate;\n      this.updateChannelChart();\n    } catch (error) {\n      this.errorMessage = 'An error occurred while loading dashboard data.';\n      console.error(error);\n    }\n  }\n  updateChannelChart() {\n    if (!this.channelData) return;\n    const dataKey = this.selectedCriteria === 'sent' ? 'Sent' : 'Delivered';\n    this.channelChartData = {\n      labels: this.channelData.labels,\n      datasets: [{\n        label: dataKey,\n        backgroundColor: this.selectedCriteria === 'sent' ? '#42A5F5' : '#66BB6A',\n        data: this.selectedCriteria === 'sent' ? this.channelData.datasets[0].data : this.channelData.datasets[1].data\n      }]\n    };\n    this.channelChartOptions = {\n      indexAxis: 'y',\n      responsive: true,\n      plugins: {\n        legend: {\n          display: true,\n          position: 'top'\n        },\n        tooltip: {\n          enabled: true\n        }\n      },\n      scales: {\n        x: {\n          beginAtZero: true\n        }\n      }\n    };\n  }\n  onCriteriaChange() {\n    this.updateChannelChart();\n  }\n  onDateChange() {\n    // Validate date range max 15 days\n    if (this.startDate && this.endDate) {\n      const start = new Date(this.startDate);\n      const end = new Date(this.endDate);\n      const diffTime = Math.abs(end.getTime() - start.getTime());\n      const diffDays = diffTime / (1000 * 60 * 60 * 24);\n      if (diffDays > 15) {\n        alert('Date range cannot exceed 15 days.');\n        // Reset endDate to startDate + 15 days or today\n        const maxEnd = new Date(start);\n        maxEnd.setDate(start.getDate() + 15);\n        this.endDate = maxEnd > new Date() ? new Date().toISOString().split('T')[0] : maxEnd.toISOString().split('T')[0];\n      }\n    }\n    // TODO: Refresh data based on new date range\n  }\n\n  createCampaign() {\n    alert('Create Campaign button clicked!');\n    // TODO: Implement create campaign functionality\n  }\n\n  static {\n    this.ɵfac = function DashboardComponent_Factory(t) {\n      return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.DashboardDataService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DashboardComponent,\n      selectors: [[\"app-dashboard\"]],\n      decls: 21,\n      vars: 10,\n      consts: [[1, \"top-bar\", \"p-4\", \"flex\", \"items-center\", \"justify-between\", \"border-b\", \"border-gray-300\"], [1, \"date-range-selector\"], [\"for\", \"dateRange\", 1, \"mr-2\", \"font-semibold\"], [\"type\", \"date\", \"id\", \"startDate\", \"name\", \"startDate\", \"max\", \"\", 1, \"border\", \"border-gray-400\", \"rounded\", \"px-2\", \"py-1\", \"mr-2\", 3, \"value\", \"max\", \"change\"], [\"type\", \"date\", \"id\", \"endDate\", \"name\", \"endDate\", \"max\", \"\", 1, \"border\", \"border-gray-400\", \"rounded\", \"px-2\", \"py-1\", \"ml-2\", 3, \"value\", \"min\", \"max\", \"change\"], [1, \"create-campaign-btn\", \"bg-blue-600\", \"text-white\", \"px-4\", \"py-2\", \"rounded\", \"hover:bg-blue-700\", \"transition\", 3, \"click\"], [1, \"kpi-cards\", \"flex\", \"space-x-4\", \"p-4\"], [\"class\", \"kpi-card bg-white shadow rounded p-4 flex-1 text-center\", 4, \"ngFor\", \"ngForOf\"], [1, \"channel-performance\", \"p-4\", \"bg-white\", \"rounded\", \"shadow\"], [1, \"flex\", \"items-center\", \"justify-between\", \"mb-4\"], [1, \"text-lg\", \"font-semibold\"], [1, \"mr-2\", \"font-medium\"], [1, \"border\", \"border-gray-300\", \"rounded\", \"px-2\", \"py-1\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"bar\", 3, \"data\", \"options\"], [1, \"kpi-card\", \"bg-white\", \"shadow\", \"rounded\", \"p-4\", \"flex-1\", \"text-center\"], [1, \"kpi-title\", \"font-semibold\", \"text-gray-700\", \"mb-2\"], [1, \"kpi-value\", \"text-2xl\", \"font-bold\", \"text-gray-900\"], [1, \"kpi-change\", \"mt-1\", 3, \"ngClass\"], [3, \"value\"]],\n      template: function DashboardComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"label\", 2);\n          i0.ɵɵtext(3, \"Date Range:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"input\", 3);\n          i0.ɵɵlistener(\"change\", function DashboardComponent_Template_input_change_4_listener() {\n            return ctx.onDateChange();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(5, \" to \");\n          i0.ɵɵelementStart(6, \"input\", 4);\n          i0.ɵɵlistener(\"change\", function DashboardComponent_Template_input_change_6_listener() {\n            return ctx.onDateChange();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_7_listener() {\n            return ctx.createCampaign();\n          });\n          i0.ɵɵtext(8, \" Create Campaign \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(9, \"div\", 6);\n          i0.ɵɵtemplate(10, DashboardComponent_div_10_Template, 7, 8, \"div\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"div\", 8)(12, \"div\", 9)(13, \"h3\", 10);\n          i0.ɵɵtext(14, \"Channel Performance\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"div\")(16, \"label\", 11);\n          i0.ɵɵtext(17, \"Criteria:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"select\", 12);\n          i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_select_ngModelChange_18_listener($event) {\n            return ctx.selectedCriteria = $event;\n          })(\"change\", function DashboardComponent_Template_select_change_18_listener() {\n            return ctx.onCriteriaChange();\n          });\n          i0.ɵɵtemplate(19, DashboardComponent_option_19_Template, 2, 2, \"option\", 13);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(20, \"p-chart\", 14);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"value\", ctx.startDate)(\"max\", ctx.endDate);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"value\", ctx.endDate)(\"min\", ctx.startDate)(\"max\", ctx.maxDate);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngForOf\", ctx.kpiCards);\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngModel\", ctx.selectedCriteria);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.criteriaOptions);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"data\", ctx.channelChartData)(\"options\", ctx.channelChartOptions);\n        }\n      },\n      dependencies: [i2.NgClass, i2.NgForOf],\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"],\n      changeDetection: 0\n    });\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;;;IAoCEA,+BAGC;IACyDA,YAAgB;IAAAA,iBAAM;IAC9EA,+BAAwD;IAAAA,YAAgB;IAAAA,iBAAM;IAC9EA,+BAMC;IACCA,YACF;IAAAA,iBAAM;;;;IAVkDA,eAAgB;IAAhBA,mCAAgB;IAChBA,eAAgB;IAAhBA,mCAAgB;IAGtEA,eAGE;IAHFA,6FAGE;IAEFA,eACF;IADEA,oFACF;;;;;IAWIA,kCAAsE;IAAAA,YAAkB;IAAAA,iBAAS;;;;IAAlDA,uCAAsB;IAACA,eAAkB;IAAlBA,qCAAkB;;;ACpDhG,OAAM,MAAOC,kBAAkB;EA2B7BC,YAAoBC,gBAAsC;IAAtC,qBAAgB,GAAhBA,gBAAgB;IAtBpC,iBAAY,GAAW,EAAE;IAEzB,cAAS,GAAW,EAAE;IACtB,YAAO,GAAW,EAAE;IACpB,YAAO,GAAW,EAAE;IAEpB,aAAQ,GAAG,CACT;MAAEC,KAAK,EAAE,eAAe;MAAEC,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAG,CAAE,EACvD;MAAEF,KAAK,EAAE,cAAc;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAG,CAAE,EACrD;MAAEF,KAAK,EAAE,eAAe;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,CAAC;IAAG,CAAE,EACvD;MAAEF,KAAK,EAAE,qBAAqB;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAG,CAAE,CAC7D;IAED,qBAAgB,GAAW,MAAM;IACjC,oBAAe,GAAG,CAChB;MAAEC,KAAK,EAAE,MAAM;MAAEF,KAAK,EAAE;IAAM,CAAE,EAChC;MAAEE,KAAK,EAAE,WAAW;MAAEF,KAAK,EAAE;IAAW,CAAE,CAC3C;EAK4D;EAE7DG,QAAQ;IACN,IAAI;MACF,IAAI,CAACC,WAAW,GAAG,IAAI,CAACN,gBAAgB,CAACO,qBAAqB,EAAE;MAChE,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAACR,gBAAgB,CAACS,oBAAoB,EAAE;MACrE,IAAI,CAACC,aAAa,GAAG,IAAI,CAACV,gBAAgB,CAACW,gBAAgB,EAAE;MAC7D,IAAI,CAACC,cAAc,GAAG,IAAI,CAACZ,gBAAgB,CAACa,iBAAiB,EAAE;MAE/D;MACA,MAAMC,KAAK,GAAG,IAAIC,IAAI,EAAE;MACxB,IAAI,CAACC,OAAO,GAAGF,KAAK,CAACG,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAChD,MAAMC,SAAS,GAAG,IAAIJ,IAAI,EAAE,CAACK,OAAO,CAACN,KAAK,CAACO,OAAO,EAAE,GAAG,CAAC,CAAC;MACzD,IAAI,CAACC,SAAS,GAAG,IAAIP,IAAI,CAACI,SAAS,CAAC,CAACF,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAChE,IAAI,CAACK,OAAO,GAAG,IAAI,CAACP,OAAO;MAE3B,IAAI,CAACQ,kBAAkB,EAAE;KAC1B,CAAC,OAAOC,KAAK,EAAE;MACd,IAAI,CAACC,YAAY,GAAG,iDAAiD;MACrEC,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;;EAExB;EAEAD,kBAAkB;IAChB,IAAI,CAAC,IAAI,CAAClB,WAAW,EAAE;IAEvB,MAAMsB,OAAO,GAAG,IAAI,CAACC,gBAAgB,KAAK,MAAM,GAAG,MAAM,GAAG,WAAW;IAEvE,IAAI,CAACC,gBAAgB,GAAG;MACtBC,MAAM,EAAE,IAAI,CAACzB,WAAW,CAACyB,MAAM;MAC/BC,QAAQ,EAAE,CACR;QACE5B,KAAK,EAAEwB,OAAO;QACdK,eAAe,EAAE,IAAI,CAACJ,gBAAgB,KAAK,MAAM,GAAG,SAAS,GAAG,SAAS;QACzEK,IAAI,EACF,IAAI,CAACL,gBAAgB,KAAK,MAAM,GAC5B,IAAI,CAACvB,WAAW,CAAC0B,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,GACjC,IAAI,CAAC5B,WAAW,CAAC0B,QAAQ,CAAC,CAAC,CAAC,CAACE;OACpC;KAEJ;IAED,IAAI,CAACC,mBAAmB,GAAG;MACzBC,SAAS,EAAE,GAAG;MACdC,UAAU,EAAE,IAAI;MAChBC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,OAAO,EAAE,IAAI;UACbC,QAAQ,EAAE;SACX;QACDC,OAAO,EAAE;UACPC,OAAO,EAAE;;OAEZ;MACDC,MAAM,EAAE;QACNC,CAAC,EAAE;UACDC,WAAW,EAAE;;;KAGlB;EACH;EAEAC,gBAAgB;IACd,IAAI,CAACvB,kBAAkB,EAAE;EAC3B;EAEAwB,YAAY;IACV;IACA,IAAI,IAAI,CAAC1B,SAAS,IAAI,IAAI,CAACC,OAAO,EAAE;MAClC,MAAM0B,KAAK,GAAG,IAAIlC,IAAI,CAAC,IAAI,CAACO,SAAS,CAAC;MACtC,MAAM4B,GAAG,GAAG,IAAInC,IAAI,CAAC,IAAI,CAACQ,OAAO,CAAC;MAClC,MAAM4B,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACH,GAAG,CAACI,OAAO,EAAE,GAAGL,KAAK,CAACK,OAAO,EAAE,CAAC;MAC1D,MAAMC,QAAQ,GAAGJ,QAAQ,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;MACjD,IAAII,QAAQ,GAAG,EAAE,EAAE;QACjBC,KAAK,CAAC,mCAAmC,CAAC;QAC1C;QACA,MAAMC,MAAM,GAAG,IAAI1C,IAAI,CAACkC,KAAK,CAAC;QAC9BQ,MAAM,CAACrC,OAAO,CAAC6B,KAAK,CAAC5B,OAAO,EAAE,GAAG,EAAE,CAAC;QACpC,IAAI,CAACE,OAAO,GAAGkC,MAAM,GAAG,IAAI1C,IAAI,EAAE,GAAG,IAAIA,IAAI,EAAE,CAACE,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGuC,MAAM,CAACxC,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;;IAGpH;EACF;;EAEAwC,cAAc;IACZF,KAAK,CAAC,iCAAiC,CAAC;IACxC;EACF;;;;uBAlHW1D,kBAAkB;IAAA;EAAA;;;YAAlBA,kBAAkB;MAAA6D;MAAAC;MAAAC;MAAAC;MAAAC;QAAA;UDT/BlE,8BAAoF;UAE9BA,2BAAW;UAAAA,iBAAQ;UACrEA,gCASE;UAHAA;YAAA,OAAUmE,kBAAc;UAAA,EAAC;UAN3BnE,iBASE;UACFA,oBACA;UAAAA,gCAUE;UAJAA;YAAA,OAAUmE,kBAAc;UAAA,EAAC;UAN3BnE,iBAUE;UAEJA,iCAGC;UADCA;YAAA,OAASmE,oBAAgB;UAAA,EAAC;UAE1BnE,iCACF;UAAAA,iBAAS;UAIXA,8BAA0C;UACxCA,qEAeM;UACRA,iBAAM;UAGNA,+BAA6D;UAEvBA,oCAAmB;UAAAA,iBAAK;UAC1DA,4BAAK;UAC6BA,0BAAS;UAAAA,iBAAQ;UACjDA,mCAAsH;UAA9GA;YAAA;UAAA,EAA8B;YAAA,OAAWmE,sBAAkB;UAAA,EAA7B;UACpCnE,4EAAiG;UACnGA,iBAAS;UAGbA,+BAAwF;UAC1FA,iBAAM;;;UAxDAA,eAAmB;UAAnBA,qCAAmB;UAWnBA,eAAiB;UAAjBA,mCAAiB;UAgBFA,eAAW;UAAXA,sCAAW;UAuBlBA,eAA8B;UAA9BA,8CAA8B;UACTA,eAAkB;UAAlBA,6CAAkB;UAI/BA,eAAyB;UAAzBA,2CAAyB","names":["i0","DashboardComponent","constructor","dashboardService","title","value","change","label","ngOnInit","channelData","getChannelPerformance","engagementMetrics","getEngagementMetrics","budgetMetrics","getBudgetMetrics","campaignEvents","getCampaignEvents","today","Date","maxDate","toISOString","split","priorDate","setDate","getDate","startDate","endDate","updateChannelChart","error","errorMessage","console","dataKey","selectedCriteria","channelChartData","labels","datasets","backgroundColor","data","channelChartOptions","indexAxis","responsive","plugins","legend","display","position","tooltip","enabled","scales","x","beginAtZero","onCriteriaChange","onDateChange","start","end","diffTime","Math","abs","getTime","diffDays","alert","maxEnd","createCampaign","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/project/sandbox/user-workspace/campaign-dashboard/src/app/components/dashboard/dashboard.component.html","/project/sandbox/user-workspace/campaign-dashboard/src/app/components/dashboard/dashboard.component.ts"],"sourcesContent":["<div class=\"top-bar p-4 flex items-center justify-between border-b border-gray-300\">\n  <div class=\"date-range-selector\">\n    <label for=\"dateRange\" class=\"mr-2 font-semibold\">Date Range:</label>\n    <input\n      type=\"date\"\n      id=\"startDate\"\n      name=\"startDate\"\n      max=\"\"\n      class=\"border border-gray-400 rounded px-2 py-1 mr-2\"\n      (change)=\"onDateChange()\"\n      [value]=\"startDate\"\n      [max]=\"endDate\"\n    />\n    to\n    <input\n      type=\"date\"\n      id=\"endDate\"\n      name=\"endDate\"\n      max=\"\"\n      class=\"border border-gray-400 rounded px-2 py-1 ml-2\"\n      (change)=\"onDateChange()\"\n      [value]=\"endDate\"\n      [min]=\"startDate\"\n      [max]=\"maxDate\"\n    />\n  </div>\n  <button\n    class=\"create-campaign-btn bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition\"\n    (click)=\"createCampaign()\"\n  >\n    Create Campaign\n  </button>\n</div>\n\n<!-- KPI Cards Row -->\n<div class=\"kpi-cards flex space-x-4 p-4\">\n  <div\n    *ngFor=\"let card of kpiCards\"\n    class=\"kpi-card bg-white shadow rounded p-4 flex-1 text-center\"\n  >\n    <div class=\"kpi-title font-semibold text-gray-700 mb-2\">{{ card.title }}</div>\n    <div class=\"kpi-value text-2xl font-bold text-gray-900\">{{ card.value }}</div>\n    <div\n      class=\"kpi-change mt-1\"\n      [ngClass]=\"{\n        'text-green-600': card.change >= 0,\n        'text-red-600': card.change < 0\n      }\"\n    >\n      {{ card.change >= 0 ? '+' : '' }}{{ card.change }}%\n    </div>\n  </div>\n</div>\n\n<!-- Channel Performance Bar Chart -->\n<div class=\"channel-performance p-4 bg-white rounded shadow\">\n  <div class=\"flex items-center justify-between mb-4\">\n    <h3 class=\"text-lg font-semibold\">Channel Performance</h3>\n    <div>\n      <label class=\"mr-2 font-medium\">Criteria:</label>\n      <select [(ngModel)]=\"selectedCriteria\" (change)=\"onCriteriaChange()\" class=\"border border-gray-300 rounded px-2 py-1\">\n        <option *ngFor=\"let option of criteriaOptions\" [value]=\"option.value\">{{ option.label }}</option>\n      </select>\n    </div>\n  </div>\n  <p-chart type=\"bar\" [data]=\"channelChartData\" [options]=\"channelChartOptions\"></p-chart>\n</div>\n","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { DashboardDataService } from '../../services/dashboard-data.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DashboardComponent implements OnInit {\n  channelData: any;\n  engagementMetrics: any;\n  budgetMetrics: any;\n  campaignEvents: any;\n  errorMessage: string = '';\n\n  startDate: string = '';\n  endDate: string = '';\n  maxDate: string = '';\n\n  kpiCards = [\n    { title: 'Total Revenue', value: '$1.2M', change: 5.4 },\n    { title: 'Campaign ROI', value: '350%', change: 3.2 },\n    { title: 'Messages Sent', value: '1.5M', change: -1.1 },\n    { title: 'Avg Conversion Rate', value: '4.5%', change: 0.8 }\n  ];\n\n  selectedCriteria: string = 'sent';\n  criteriaOptions = [\n    { label: 'Sent', value: 'sent' },\n    { label: 'Delivered', value: 'delivered' }\n  ];\n\n  channelChartData: any;\n  channelChartOptions: any;\n\n  constructor(private dashboardService: DashboardDataService) {}\n\n  ngOnInit() {\n    try {\n      this.channelData = this.dashboardService.getChannelPerformance();\n      this.engagementMetrics = this.dashboardService.getEngagementMetrics();\n      this.budgetMetrics = this.dashboardService.getBudgetMetrics();\n      this.campaignEvents = this.dashboardService.getCampaignEvents();\n\n      // Initialize date range to last 7 days\n      const today = new Date();\n      this.maxDate = today.toISOString().split('T')[0];\n      const priorDate = new Date().setDate(today.getDate() - 7);\n      this.startDate = new Date(priorDate).toISOString().split('T')[0];\n      this.endDate = this.maxDate;\n\n      this.updateChannelChart();\n    } catch (error) {\n      this.errorMessage = 'An error occurred while loading dashboard data.';\n      console.error(error);\n    }\n  }\n\n  updateChannelChart() {\n    if (!this.channelData) return;\n\n    const dataKey = this.selectedCriteria === 'sent' ? 'Sent' : 'Delivered';\n\n    this.channelChartData = {\n      labels: this.channelData.labels,\n      datasets: [\n        {\n          label: dataKey,\n          backgroundColor: this.selectedCriteria === 'sent' ? '#42A5F5' : '#66BB6A',\n          data:\n            this.selectedCriteria === 'sent'\n              ? this.channelData.datasets[0].data\n              : this.channelData.datasets[1].data\n        }\n      ]\n    };\n\n    this.channelChartOptions = {\n      indexAxis: 'y',\n      responsive: true,\n      plugins: {\n        legend: {\n          display: true,\n          position: 'top'\n        },\n        tooltip: {\n          enabled: true\n        }\n      },\n      scales: {\n        x: {\n          beginAtZero: true\n        }\n      }\n    };\n  }\n\n  onCriteriaChange() {\n    this.updateChannelChart();\n  }\n\n  onDateChange() {\n    // Validate date range max 15 days\n    if (this.startDate && this.endDate) {\n      const start = new Date(this.startDate);\n      const end = new Date(this.endDate);\n      const diffTime = Math.abs(end.getTime() - start.getTime());\n      const diffDays = diffTime / (1000 * 60 * 60 * 24);\n      if (diffDays > 15) {\n        alert('Date range cannot exceed 15 days.');\n        // Reset endDate to startDate + 15 days or today\n        const maxEnd = new Date(start);\n        maxEnd.setDate(start.getDate() + 15);\n        this.endDate = maxEnd > new Date() ? new Date().toISOString().split('T')[0] : maxEnd.toISOString().split('T')[0];\n      }\n    }\n    // TODO: Refresh data based on new date range\n  }\n\n  createCampaign() {\n    alert('Create Campaign button clicked!');\n    // TODO: Implement create campaign functionality\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}