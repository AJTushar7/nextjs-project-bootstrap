{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ChangeDetectionStrategy } from '@angular/core';\nlet DashboardComponent = class DashboardComponent {\n  constructor(dashboardService) {\n    this.dashboardService = dashboardService;\n    this.errorMessage = '';\n    this.startDate = '';\n    this.endDate = '';\n    this.maxDate = '';\n    this.kpiCards = [{\n      title: 'Total Revenue',\n      value: '$1.2M',\n      change: 5.4\n    }, {\n      title: 'Campaign ROI',\n      value: '350%',\n      change: 3.2\n    }, {\n      title: 'Messages Sent',\n      value: '1.5M',\n      change: -1.1\n    }, {\n      title: 'Avg Conversion Rate',\n      value: '4.5%',\n      change: 0.8\n    }];\n    this.selectedCriteria = 'sent';\n    this.criteriaOptions = [{\n      label: 'Sent',\n      value: 'sent'\n    }, {\n      label: 'Delivered',\n      value: 'delivered'\n    }];\n    this.viewMode = 'card';\n    this.statusOptions = ['Active', 'Paused', 'Completed'];\n    this.selectedStatus = '';\n    this.cardViewStart = 0;\n    this.bspPerformanceData = [{\n      name: 'BSP 1',\n      cost: 1200,\n      delivery: 95,\n      engagement: 80,\n      optimization: 'High'\n    }, {\n      name: 'BSP 2',\n      cost: 1500,\n      delivery: 90,\n      engagement: 75,\n      optimization: 'Medium'\n    }, {\n      name: 'BSP 3',\n      cost: 1100,\n      delivery: 85,\n      engagement: 70,\n      optimization: 'Low'\n    }, {\n      name: 'BSP 4',\n      cost: 1300,\n      delivery: 92,\n      engagement: 78,\n      optimization: 'High'\n    }, {\n      name: 'BSP 5',\n      cost: 1400,\n      delivery: 88,\n      engagement: 74,\n      optimization: 'Medium'\n    }];\n    this.orchestrationData = {\n      messageFlowEfficiency: 87,\n      channelSync: 92,\n      fallbackSuccess: 78,\n      overallScore: 8.5\n    };\n    this.inactiveCustomerData = {\n      segments: 12,\n      exclusionLists: 8,\n      potentialSavings: 15000,\n      segmentBreakdown: [{\n        name: 'Dormant Users',\n        inactiveCount: 2500,\n        lastActivity: '90+ days',\n        savings: 5000\n      }, {\n        name: 'Low Engagement',\n        inactiveCount: 1800,\n        lastActivity: '60+ days',\n        savings: 3500\n      }, {\n        name: 'Unsubscribed',\n        inactiveCount: 3200,\n        lastActivity: '30+ days',\n        savings: 6500\n      }]\n    };\n    this.festivalData = [{\n      name: 'Diwali 2024',\n      date: 'November 1, 2024',\n      messagesSent: 250000,\n      engagementRate: 85,\n      revenue: 125000,\n      roi: 320\n    }, {\n      name: 'Christmas 2023',\n      date: 'December 25, 2023',\n      messagesSent: 180000,\n      engagementRate: 78,\n      revenue: 95000,\n      roi: 280\n    }, {\n      name: 'New Year 2024',\n      date: 'January 1, 2024',\n      messagesSent: 200000,\n      engagementRate: 82,\n      revenue: 110000,\n      roi: 300\n    }];\n    this.budgetCalculator = {\n      preCampaign: {\n        plannedBudget: 10000,\n        expectedMessages: 50000,\n        targetConversionRate: 5\n      },\n      postCampaign: {\n        actualSpend: 9500,\n        messagesSent: 48000,\n        actualConversionRate: 5.5\n      }\n    };\n  }\n  ngOnInit() {\n    try {\n      this.channelData = this.dashboardService.getChannelPerformance();\n      this.engagementMetrics = this.dashboardService.getEngagementMetrics();\n      this.budgetMetrics = this.dashboardService.getBudgetMetrics();\n      this.campaignEvents = this.dashboardService.getCampaignEvents();\n      // Initialize date range to last 7 days\n      const today = new Date();\n      this.maxDate = today.toISOString().split('T')[0];\n      const priorDate = new Date().setDate(today.getDate() - 7);\n      this.startDate = new Date(priorDate).toISOString().split('T')[0];\n      this.endDate = this.maxDate;\n      this.updateChannelChart();\n    } catch (error) {\n      this.errorMessage = 'An error occurred while loading dashboard data.';\n      console.error(error);\n    }\n  }\n  updateChannelChart() {\n    if (!this.channelData) return;\n    const dataKey = this.selectedCriteria === 'sent' ? 'Sent' : 'Delivered';\n    this.channelChartData = {\n      labels: this.channelData.labels,\n      datasets: [{\n        label: dataKey,\n        backgroundColor: this.selectedCriteria === 'sent' ? '#42A5F5' : '#66BB6A',\n        data: this.selectedCriteria === 'sent' ? this.channelData.datasets[0].data : this.channelData.datasets[1].data\n      }]\n    };\n    this.channelChartOptions = {\n      indexAxis: 'y',\n      responsive: true,\n      plugins: {\n        legend: {\n          display: true,\n          position: 'top'\n        },\n        tooltip: {\n          enabled: true\n        }\n      },\n      scales: {\n        x: {\n          beginAtZero: true\n        }\n      }\n    };\n  }\n  onCriteriaChange() {\n    this.updateChannelChart();\n  }\n  getHeatmapColor(value) {\n    if (value >= 75) {\n      return '#34D399'; // green\n    } else if (value >= 50) {\n      return '#FBBF24'; // yellow\n    } else {\n      return '#F87171'; // red\n    }\n  }\n\n  get filteredCampaigns() {\n    if (!this.campaignEvents) return [];\n    if (!this.selectedStatus) return this.campaignEvents;\n    return this.campaignEvents.filter(c => c.status === this.selectedStatus);\n  }\n  setViewMode(mode) {\n    this.viewMode = mode;\n  }\n  prevCardView() {\n    if (this.cardViewStart > 0) {\n      this.cardViewStart -= 1;\n    }\n  }\n  nextCardView() {\n    if (this.cardViewStart + 3 < this.filteredCampaigns.length) {\n      this.cardViewStart += 1;\n    }\n  }\n  onDateChange() {\n    // Validate date range max 15 days\n    if (this.startDate && this.endDate) {\n      const start = new Date(this.startDate);\n      const end = new Date(this.endDate);\n      const diffTime = Math.abs(end.getTime() - start.getTime());\n      const diffDays = diffTime / (1000 * 60 * 60 * 24);\n      if (diffDays > 15) {\n        alert('Date range cannot exceed 15 days.');\n        // Reset endDate to startDate + 15 days or today\n        const maxEnd = new Date(start);\n        maxEnd.setDate(start.getDate() + 15);\n        this.endDate = maxEnd > new Date() ? new Date().toISOString().split('T')[0] : maxEnd.toISOString().split('T')[0];\n      }\n    }\n    // TODO: Refresh data based on new date range\n  }\n\n  getEstimatedCPM() {\n    if (this.budgetCalculator.preCampaign.expectedMessages > 0) {\n      return this.budgetCalculator.preCampaign.plannedBudget / this.budgetCalculator.preCampaign.expectedMessages * 1000;\n    }\n    return 0;\n  }\n  getActualCPM() {\n    if (this.budgetCalculator.postCampaign.messagesSent > 0) {\n      return this.budgetCalculator.postCampaign.actualSpend / this.budgetCalculator.postCampaign.messagesSent * 1000;\n    }\n    return 0;\n  }\n  getBudgetVariance() {\n    return this.budgetCalculator.postCampaign.actualSpend - this.budgetCalculator.preCampaign.plannedBudget;\n  }\n  getConversionVariance() {\n    return this.budgetCalculator.postCampaign.actualConversionRate - this.budgetCalculator.preCampaign.targetConversionRate;\n  }\n  getBudgetVarianceColor() {\n    const variance = this.getBudgetVariance();\n    return variance <= 0 ? 'text-green-600' : 'text-red-600';\n  }\n  getConversionVarianceColor() {\n    const variance = this.getConversionVariance();\n    return variance >= 0 ? 'text-green-600' : 'text-red-600';\n  }\n  getEfficiencyScore() {\n    const budgetEfficiency = this.getBudgetVariance() <= 0 ? 5 : Math.max(0, 5 - Math.abs(this.getBudgetVariance()) / 1000);\n    const conversionEfficiency = this.getConversionVariance() >= 0 ? 5 : Math.max(0, 5 - Math.abs(this.getConversionVariance()));\n    return Math.round((budgetEfficiency + conversionEfficiency) * 10) / 10;\n  }\n  createCampaign() {\n    alert('Create Campaign button clicked!');\n    // TODO: Implement create campaign functionality\n  }\n\n  getChannelChartData() {\n    if (!this.channelData) return [];\n    const dataIndex = this.selectedCriteria === 'sent' ? 0 : 1;\n    const data = this.channelData.datasets[dataIndex].data;\n    return this.channelData.labels.map((label, index) => ({\n      label: label,\n      value: data[index]\n    }));\n  }\n  getMaxValue() {\n    const chartData = this.getChannelChartData();\n    if (chartData.length === 0) return 100;\n    return Math.max(...chartData.map(item => item.value));\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], DashboardComponent);\nexport { DashboardComponent };","map":{"version":3,"mappings":"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","names":["Component","ChangeDetectionStrategy","DashboardComponent","constructor","dashboardService","title","value","change","label","name","cost","delivery","engagement","optimization","messageFlowEfficiency","channelSync","fallbackSuccess","overallScore","segments","exclusionLists","potentialSavings","segmentBreakdown","inactiveCount","lastActivity","savings","date","messagesSent","engagementRate","revenue","roi","preCampaign","plannedBudget","expectedMessages","targetConversionRate","postCampaign","actualSpend","actualConversionRate","ngOnInit","channelData","getChannelPerformance","engagementMetrics","getEngagementMetrics","budgetMetrics","getBudgetMetrics","campaignEvents","getCampaignEvents","today","Date","maxDate","toISOString","split","priorDate","setDate","getDate","startDate","endDate","updateChannelChart","error","errorMessage","console","dataKey","selectedCriteria","channelChartData","labels","datasets","backgroundColor","data","channelChartOptions","indexAxis","responsive","plugins","legend","display","position","tooltip","enabled","scales","x","beginAtZero","onCriteriaChange","getHeatmapColor","filteredCampaigns","selectedStatus","filter","c","status","setViewMode","mode","viewMode","prevCardView","cardViewStart","nextCardView","length","onDateChange","start","end","diffTime","Math","abs","getTime","diffDays","alert","maxEnd","getEstimatedCPM","budgetCalculator","getActualCPM","getBudgetVariance","getConversionVariance","getBudgetVarianceColor","variance","getConversionVarianceColor","getEfficiencyScore","budgetEfficiency","max","conversionEfficiency","round","createCampaign","getChannelChartData","dataIndex","map","index","getMaxValue","chartData","item","selector","templateUrl","styleUrls","changeDetection","OnPush"],"sourceRoot":"","sources":["/project/sandbox/user-workspace/campaign-dashboard/src/app/components/dashboard/dashboard.component.ts"],"sourcesContent":["import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { DashboardDataService } from '../../services/dashboard-data.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DashboardComponent implements OnInit {\n  channelData: any;\n  engagementMetrics: any;\n  budgetMetrics: any;\n  campaignEvents: any;\n  errorMessage: string = '';\n\n  startDate: string = '';\n  endDate: string = '';\n  maxDate: string = '';\n\n  kpiCards = [\n    { title: 'Total Revenue', value: '$1.2M', change: 5.4 },\n    { title: 'Campaign ROI', value: '350%', change: 3.2 },\n    { title: 'Messages Sent', value: '1.5M', change: -1.1 },\n    { title: 'Avg Conversion Rate', value: '4.5%', change: 0.8 }\n  ];\n\n  selectedCriteria: string = 'sent';\n  criteriaOptions = [\n    { label: 'Sent', value: 'sent' },\n    { label: 'Delivered', value: 'delivered' }\n  ];\n\n  channelChartData: any;\n  channelChartOptions: any;\n\n  constructor(private dashboardService: DashboardDataService) {}\n\n  ngOnInit() {\n    try {\n      this.channelData = this.dashboardService.getChannelPerformance();\n      this.engagementMetrics = this.dashboardService.getEngagementMetrics();\n      this.budgetMetrics = this.dashboardService.getBudgetMetrics();\n      this.campaignEvents = this.dashboardService.getCampaignEvents();\n\n      // Initialize date range to last 7 days\n      const today = new Date();\n      this.maxDate = today.toISOString().split('T')[0];\n      const priorDate = new Date().setDate(today.getDate() - 7);\n      this.startDate = new Date(priorDate).toISOString().split('T')[0];\n      this.endDate = this.maxDate;\n\n      this.updateChannelChart();\n    } catch (error) {\n      this.errorMessage = 'An error occurred while loading dashboard data.';\n      console.error(error);\n    }\n  }\n\n  updateChannelChart() {\n    if (!this.channelData) return;\n\n    const dataKey = this.selectedCriteria === 'sent' ? 'Sent' : 'Delivered';\n\n    this.channelChartData = {\n      labels: this.channelData.labels,\n      datasets: [\n        {\n          label: dataKey,\n          backgroundColor: this.selectedCriteria === 'sent' ? '#42A5F5' : '#66BB6A',\n          data:\n            this.selectedCriteria === 'sent'\n              ? this.channelData.datasets[0].data\n              : this.channelData.datasets[1].data\n        }\n      ]\n    };\n\n    this.channelChartOptions = {\n      indexAxis: 'y',\n      responsive: true,\n      plugins: {\n        legend: {\n          display: true,\n          position: 'top'\n        },\n        tooltip: {\n          enabled: true\n        }\n      },\n      scales: {\n        x: {\n          beginAtZero: true\n        }\n      }\n    };\n  }\n\n  onCriteriaChange() {\n    this.updateChannelChart();\n  }\n\n  getHeatmapColor(value: number): string {\n    if (value >= 75) {\n      return '#34D399'; // green\n    } else if (value >= 50) {\n      return '#FBBF24'; // yellow\n    } else {\n      return '#F87171'; // red\n    }\n  }\n\n  viewMode: 'card' | 'table' = 'card';\n  statusOptions = ['Active', 'Paused', 'Completed'];\n  selectedStatus: string = '';\n\n  cardViewStart: number = 0;\n\n  get filteredCampaigns() {\n    if (!this.campaignEvents) return [];\n    if (!this.selectedStatus) return this.campaignEvents;\n    return this.campaignEvents.filter((c: any) => c.status === this.selectedStatus);\n  }\n\n  setViewMode(mode: 'card' | 'table') {\n    this.viewMode = mode;\n  }\n\n  prevCardView() {\n    if (this.cardViewStart > 0) {\n      this.cardViewStart -= 1;\n    }\n  }\n\n  nextCardView() {\n    if (this.cardViewStart + 3 < this.filteredCampaigns.length) {\n      this.cardViewStart += 1;\n    }\n  }\n\n  onDateChange() {\n    // Validate date range max 15 days\n    if (this.startDate && this.endDate) {\n      const start = new Date(this.startDate);\n      const end = new Date(this.endDate);\n      const diffTime = Math.abs(end.getTime() - start.getTime());\n      const diffDays = diffTime / (1000 * 60 * 60 * 24);\n      if (diffDays > 15) {\n        alert('Date range cannot exceed 15 days.');\n        // Reset endDate to startDate + 15 days or today\n        const maxEnd = new Date(start);\n        maxEnd.setDate(start.getDate() + 15);\n        this.endDate = maxEnd > new Date() ? new Date().toISOString().split('T')[0] : maxEnd.toISOString().split('T')[0];\n      }\n    }\n    // TODO: Refresh data based on new date range\n  }\n\n  bspPerformanceData = [\n    { name: 'BSP 1', cost: 1200, delivery: 95, engagement: 80, optimization: 'High' },\n    { name: 'BSP 2', cost: 1500, delivery: 90, engagement: 75, optimization: 'Medium' },\n    { name: 'BSP 3', cost: 1100, delivery: 85, engagement: 70, optimization: 'Low' },\n    { name: 'BSP 4', cost: 1300, delivery: 92, engagement: 78, optimization: 'High' },\n    { name: 'BSP 5', cost: 1400, delivery: 88, engagement: 74, optimization: 'Medium' }\n  ];\n\n  orchestrationData = {\n    messageFlowEfficiency: 87,\n    channelSync: 92,\n    fallbackSuccess: 78,\n    overallScore: 8.5\n  };\n\n  inactiveCustomerData = {\n    segments: 12,\n    exclusionLists: 8,\n    potentialSavings: 15000,\n    segmentBreakdown: [\n      { name: 'Dormant Users', inactiveCount: 2500, lastActivity: '90+ days', savings: 5000 },\n      { name: 'Low Engagement', inactiveCount: 1800, lastActivity: '60+ days', savings: 3500 },\n      { name: 'Unsubscribed', inactiveCount: 3200, lastActivity: '30+ days', savings: 6500 }\n    ]\n  };\n\n  festivalData = [\n    { name: 'Diwali 2024', date: 'November 1, 2024', messagesSent: 250000, engagementRate: 85, revenue: 125000, roi: 320 },\n    { name: 'Christmas 2023', date: 'December 25, 2023', messagesSent: 180000, engagementRate: 78, revenue: 95000, roi: 280 },\n    { name: 'New Year 2024', date: 'January 1, 2024', messagesSent: 200000, engagementRate: 82, revenue: 110000, roi: 300 }\n  ];\n\n  budgetCalculator = {\n    preCampaign: {\n      plannedBudget: 10000,\n      expectedMessages: 50000,\n      targetConversionRate: 5\n    },\n    postCampaign: {\n      actualSpend: 9500,\n      messagesSent: 48000,\n      actualConversionRate: 5.5\n    }\n  };\n\n  getEstimatedCPM(): number {\n    if (this.budgetCalculator.preCampaign.expectedMessages > 0) {\n      return (this.budgetCalculator.preCampaign.plannedBudget / this.budgetCalculator.preCampaign.expectedMessages) * 1000;\n    }\n    return 0;\n  }\n\n  getActualCPM(): number {\n    if (this.budgetCalculator.postCampaign.messagesSent > 0) {\n      return (this.budgetCalculator.postCampaign.actualSpend / this.budgetCalculator.postCampaign.messagesSent) * 1000;\n    }\n    return 0;\n  }\n\n  getBudgetVariance(): number {\n    return this.budgetCalculator.postCampaign.actualSpend - this.budgetCalculator.preCampaign.plannedBudget;\n  }\n\n  getConversionVariance(): number {\n    return this.budgetCalculator.postCampaign.actualConversionRate - this.budgetCalculator.preCampaign.targetConversionRate;\n  }\n\n  getBudgetVarianceColor(): string {\n    const variance = this.getBudgetVariance();\n    return variance <= 0 ? 'text-green-600' : 'text-red-600';\n  }\n\n  getConversionVarianceColor(): string {\n    const variance = this.getConversionVariance();\n    return variance >= 0 ? 'text-green-600' : 'text-red-600';\n  }\n\n  getEfficiencyScore(): number {\n    const budgetEfficiency = this.getBudgetVariance() <= 0 ? 5 : Math.max(0, 5 - Math.abs(this.getBudgetVariance()) / 1000);\n    const conversionEfficiency = this.getConversionVariance() >= 0 ? 5 : Math.max(0, 5 - Math.abs(this.getConversionVariance()));\n    return Math.round((budgetEfficiency + conversionEfficiency) * 10) / 10;\n  }\n\n  createCampaign() {\n    alert('Create Campaign button clicked!');\n    // TODO: Implement create campaign functionality\n  }\n\n  getChannelChartData() {\n    if (!this.channelData) return [];\n    \n    const dataIndex = this.selectedCriteria === 'sent' ? 0 : 1;\n    const data = this.channelData.datasets[dataIndex].data;\n    \n    return this.channelData.labels.map((label: string, index: number) => ({\n      label: label,\n      value: data[index]\n    }));\n  }\n\n  getMaxValue(): number {\n    const chartData = this.getChannelChartData();\n    if (chartData.length === 0) return 100;\n    return Math.max(...chartData.map((item: any) => item.value));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}